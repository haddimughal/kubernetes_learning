CI/CD pipeline of node application using jenkins, ansible, docker, helmchart, github, dockerhub.

We will use three ubuntu 20.04 VM's
1) Jenkins + Ansible Server (name: jenkins-node)
2) Docker machine for staging (name: staging-node)
3) On Premises Kubernetes master for production (name: production-node)

Detailed Steps:
1) Install jenkins and ansible on same ubuntu 20.04.
Install Jenkins:
````````````````
# wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
# sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
# sudo apt update
# sudo apt install jenkins
# sudo systemctl start jenkins
-Open http://your_server_ip_or_domain:8080 in browser
# sudo cat /var/lib/jenkins/secrets/initialAdminPassword
-Copy password from file to webpage
-Click on installing suggested plugins
-Fill the form to create first admin user.

Install ansible:
````````````````
# sudo apt update
# sudo apt install ansible

2) Create a github private repository named 'node-pipeline'.
-Create folder named 'pipeline'. All pipeline related files will be in that folder.

-Create a file named 'server.js'. Add following lines.
var http = require('http')

var port = 3000

var server = http.createServer(function (request, response) {
  response.writeHead(200, {'Content-Type': 'text/plain'})
  response.end('Hello World by node app in CICD.\n')
})

server.listen(port)

console.log('Server running at http://10.28.82.84:' + port)
``````````````````````````````````````````````````````````````
-Create a file named 'package.json' and add following lines.
{
  "name": "docker-test",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": "zeeshan",
  "license": "ISC"
}
`````````````````````````````````````````````````````````````
-Create a file named 'Dockerfile' and add following lines.
FROM node:4.2
COPY . /src
RUN cd /src && npm install
EXPOSE 3000
CMD ["node", "/src/server.js"]
`````````````````````````````````````````````````````````````
- Go to pipeline folder and create file named 'Jenkinsfile' and add following lines
pipeline {
    agent { 
        label 'master' 
    }
    
    environment {
        mailRecipients = '<username>@<domain.com>'
    }
    
    stages {
        stage('Deployment started') {
            steps {
                script {
                    if (deployOn == 'production') {
                        echo 'Deploying to : ' + deployOn
                        ansiblePlaybook become: true, colorized: true, credentialsId: 'ansible-login', disableHostKeyChecking: true, installation: 'ansible', inventory: 'pipeline/hosts', playbook: 'pipeline/helmPlaybook.yaml'
                    }  else if (deployOn == 'staging') {
                        echo 'Deploying to : ' + deployOn
                        withCredentials([usernamePassword(credentialsId: 'dockerhublogin', usernameVariable: 'dh_username', passwordVariable: 'dh_password')]){
                        ansiblePlaybook become: true, extras: '-e dh_username=$dh_username -e dh_password=$dh_password', colorized: true, credentialsId: 'ansible-login', disableHostKeyChecking: true, installation: 'ansible', inventory: 'pipeline/hosts', playbook: 'pipeline/playbook.yaml'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'I will always say Hello again!'
            emailext attachLog: true, body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: <a href='${env.BUILD_URL}'>Click here.</a>. <a href='http://<Server-IP>:8080/job/node-pipeline/buildWithParameters?token=access-token&deployOn=production'>Deploy to production.</a>",
                to: "${mailRecipients}",
                subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}"
        }
    }
}
```````````````````````````````````````````````````````````````````````````````
- In pipeline folder create file named 'default.yml' in which all ansible variables will be stored. Add following lines
---
repo_url: git@github.com:zeeshan-athar/node-pipeline.git
repo_remote: origin
repo_version: main
webapps_dir: /nodeApp/
default_container_name: node-server
default_container_image: <docker-id>/node
default_container_tag: latest
```````````````````````````````````````````````````````````````````````````````
- In pipeline folder create file named 'hosts' which will be the inventory file for ansible. Add following lines
[webservers]
10.28.82.84

[kubecluster]
10.28.82.74

[all:vars]
ansible_python_interpreter=/usr/bin/python3
```````````````````````````````````````````````````````````````````````````````
- In pipeline folder create file named 'playbook.yaml' which will be the playbook for staging server. Add following lines
---
- hosts: webservers
  vars_files:
    - default.yml

  tasks:
     - name: Copying ssh key file to target host
       copy:
        src: /home/zee/id_rsa
        dest: /root/.ssh
        owner: root
        group: root        
        mode: 0600
      
     - name: Clone a private repository into {{webapps_dir}} folder.
       git:
        repo: "{{ repo_url }}"
        version: "{{ repo_version }}"
        dest: "{{ webapps_dir }}"
        force: yes
         
     - name: Docker dependency installation
       apt:
        name: "{{item}}"
        state: present
        update_cache: true
       loop:
         - apt-transport-https
         - ca-certificates
         - curl
         - gnupg-agent
         - software-properties-common

     - name: add Docker GPG Key
       apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

     - name: Add docker repository to apt
       apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

     - name: Docker Installation
       apt:
        name: "{{item}}"
        state: present
        update_cache: true
       loop:
         - docker-ce
         - docker-ce-cli
         - containerd.io

     - name: create Docker Service directory
       file:
        path: /etc/systemd/system/docker.service.d
        state: directory

     - name: start docker service
       service:
        name: docker
        state: started
        enabled: true
      
     - name: Start service docker
       service:
        name: docker
        state: started
        
     - name: Log into DockerHub
       docker_login:
        username: "{{ dh_username }}"
        password: "{{ dh_password }}"

     - name: Build image named {{ default_container_image }}. Push it to a Docker Hub.
       docker_image:
         build:
           path: "{{ webapps_dir }}"
         name: "{{ default_container_image }}"
         tag: "{{ default_container_tag }}"
         push: yes
         force_source: yes
         source: build
        
     - name: Log out of DockerHub
       docker_login:
        state: absent

     - name: Create container named {{ default_container_name }}
       docker_container:
        name: "{{ default_container_name }}"
        image: "{{ default_container_image }}:{{default_container_tag}}"
        recreate: yes
        ports:
          - "3000:3000"
        state: started
        
     - name: Remove old images
       docker_prune:
         images: yes
`````````````````````````````````````````````````````````````````````````````````````````````
- In pipeline folder create file named 'helmPlaybook.yaml' which will be the playbook for production server. Add following lines
---
- hosts: kubecluster
  vars_files:
    - default.yml
  tasks:
     - name: Copying ssh key file to target host
       copy:
        src: /home/zee/id_rsa
        dest: /root/.ssh
        owner: root
        group: root        
        mode: 0600
     
     - name: ensure github.com is a known host
       lineinfile:
         dest: /root/.ssh/known_hosts
         create: yes
         state: present
         line: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
         regexp: "^github\\.com"
    
     - name: Clone a private repository into {{webapps_dir}} folder.
       git:
         repo: "{{ repo_url }}"
         version: "{{ repo_version }}"
         dest: "{{ webapps_dir }}"
         force: yes
     
     - name: Check if chart is deployed already or not
       shell: "helm ls | grep nodeapp | awk '{print $2}'"
       register: revisionNumber
     
     - name: Installing helm chart
       shell: "helm install -n nodeapp {{ webapps_dir }}pipeline/node-helm-demo/"
       args:
         executable: /bin/bash
       when: revisionNumber.stdout == ""
       
     - name: Current Revision No. {{revisionNumber.stdout}}. Upgrading helm chart
       shell: "helm upgrade --recreate-pods nodeapp {{ webapps_dir }}pipeline/node-helm-demo/"
       args:
         executable: /bin/bash
       when: revisionNumber.stdout > "0"
``````````````````````````````````````````````````````````````````````````````````````````
3) Generate SSH key pair on jenkins-node.
# ssh-keygen
# cp ~/.ssh/id_rsa /home/zee/id_rsa
# chown 600 /home/zee/id_rsa
# cat ~/.ssh/id_rsa.pub
Go to github > setting > SSH and GPG keys > New SSH key > Copy id_rsa.pub content from jenkins-node and paste in 'Key' textbox. > Add SSH key

4) Install modules in jenkins.
-Dashboard > Manage Jenkins > Manage Plugins > Available
Install modules
- Ansible plugin

5) Go to jenkins admin panel and add credentials.
Dashboard > Manage Jenkins > Manage Credentials
- Create vm's login credentials named 'ansible-login'
- Create dockerhub login credentials named 'dockerhublogin'
- Create github login credentials named 'github-login'
- Create email login credentials named 'test_mail'

6) Create user in both staging-node and production-node and give them sudo access with no password. It will be used by ansible to login in that node.
# adduser ansible
# visudo #(Add following line bellow %sudo) 
ansible    ALL=(ALL:ALL) NOPASSWD:ALL

7) Configure email with jenkins so that emails will be triggered by jenkins.
-Open jenkins dashboard
-Dashboard > Manage Jenkins > Configure System
Go to 'Extended E-mail Notification' section
add following (suppose we are going to integrate gmail)
 SMTP server : smtp.gmail.com
 SMTP Port : 465
 click on 'advanced' button
 Credentials : test_mail
 check 'use SSL' box
Click save.

8) Install helm on kubernetes master node (production-node)
# curl https://baltocdn.com/helm/signing.asc | sudo apt-key add -
# sudo apt-get install apt-transport-https --yes
# echo "deb https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
# sudo apt-get update
# sudo apt-get install helm

9) Now create pipeline on jenkins.
Dashboard > New Item > Name pipeline as 'node-pipeline' > select 'Pipeline' > OK
-Check 'This project is parameterized' box > Add parameter > String parameter
Add following in textboxes
 Name : deployOn
 Default Value : staging
 Description : By default staging pipeline will started

Check 'Trigger builds remotely (e.g from scripts)' box
 Authentication Token : access-token

Go to 'pipeline' section
 Defination : pipeline script from SCM
 SCM : Git
 Repository URL : git@github.com:zeeshan-athar/node-pipeline.git
 Credentials : github-login
 Branch Specifier : */main <--(same as in github branch name) 
 Script Path : pipeline/Jenkinsfile
Click Save.
Now change in 'server.js' file in github and save it. Jenkins Staging pipeline will be triggered automatically. After compeletion email will be received on defined email with the link to trigger production pipeline. Once click production pipeline will start working.
